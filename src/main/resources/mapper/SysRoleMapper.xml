<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.shiguiwu.admin.mapper.SysRoleMapper">
  <resultMap id="BaseResultMap" type="com.shiguiwu.admin.entity.SysRole">
    <!--@mbg.generated-->
    <!--@Table sys_role-->
    <id column="id" jdbcType="INTEGER" property="id" />
    <result column="name" jdbcType="VARCHAR" property="name" />
    <result column="description" jdbcType="VARCHAR" property="description" />
    <result column="createTime" jdbcType="TIMESTAMP" property="createTime" />
    <result column="updateTime" jdbcType="TIMESTAMP" property="updateTime" />
  </resultMap>
  <sql id="Base_Column_List">
    <!--@mbg.generated-->
    id, `name`, description, createTime, updateTime
  </sql>
  <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="BaseResultMap">
    <!--@mbg.generated-->
    select 
    <include refid="Base_Column_List" />
    from sys_role
    where id = #{id,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
    <!--@mbg.generated-->
    delete from sys_role
    where id = #{id,jdbcType=INTEGER}
  </delete>
  <insert id="insert" keyColumn="id" keyProperty="id" parameterType="com.shiguiwu.admin.entity.SysRole" useGeneratedKeys="true">
    <!--@mbg.generated-->
    insert into sys_role (`name`, description, createTime, updateTime)
    values (#{name,jdbcType=VARCHAR}, #{description,jdbcType=VARCHAR}, now(), now())
  </insert>
  <insert id="insertSelective" keyColumn="id" keyProperty="id" parameterType="com.shiguiwu.admin.entity.SysRole" useGeneratedKeys="true">
    <!--@mbg.generated-->
    insert into sys_role
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="name != null">
        `name`,
      </if>
      <if test="description != null">
        description,
      </if>
      <if test="createTime != null">
        createTime,
      </if>
      <if test="updateTime != null">
        updateTime,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="name != null">
        #{name,jdbcType=VARCHAR},
      </if>
      <if test="description != null">
        #{description,jdbcType=VARCHAR},
      </if>
      <if test="createTime != null">
        #{createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="updateTime != null">
        #{updateTime,jdbcType=TIMESTAMP},
      </if>
    </trim>
  </insert>
  <update id="updateByPrimaryKeySelective" parameterType="com.shiguiwu.admin.entity.SysRole">
    <!--@mbg.generated-->
    update sys_role
    <set>
      <if test="name != null">
        `name` = #{name,jdbcType=VARCHAR},
      </if>
      <if test="description != null">
        description = #{description,jdbcType=VARCHAR},
      </if>
      <if test="createTime != null">
        createTime = #{createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="updateTime != null">
        updateTime = #{updateTime,jdbcType=TIMESTAMP},
      </if>
    </set>
    where id = #{id,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.shiguiwu.admin.entity.SysRole">
    <!--@mbg.generated-->
    update sys_role
    set `name` = #{name,jdbcType=VARCHAR},
      description = #{description,jdbcType=VARCHAR},
      createTime = #{createTime,jdbcType=TIMESTAMP},
      updateTime = #{updateTime,jdbcType=TIMESTAMP}
    where id = #{id,jdbcType=INTEGER}
  </update>

  <select id="queryAllRole" resultMap="BaseResultMap" >
    select <include refid="Base_Column_List" /> from sys_role
  </select>

  <select id="findAll" parameterType="com.shiguiwu.admin.dto.RoleDto" resultMap="BaseResultMap" >
    select <include refid="Base_Column_List" /> from sys_role where 1=1
    <if test="name != null and name != ''" >
      and name like concat('%',#{name,jdbcType=VARCHAR},'%')
    </if>
  </select>

  <select id="queryRoleAndPermissionIdsById" parameterType="integer" resultType="com.shiguiwu.admin.dto.RoleDto">
    select r.*,(select group_concat(sr.permissionId) from sys_role_permission sr where sr.roleId=r.id group by sr.roleId) as permissionIds from sys_role r where r.id= #{id,jdbcType=INTEGER}
  </select>

  <delete id="batDelete" parameterType="list" >
    delete from sys_role where id in
    <foreach collection="list" item="item" index="index" separator="," open="(" close=")">
      #{item,jdbcType=INTEGER}
    </foreach>
  </delete>
</mapper>